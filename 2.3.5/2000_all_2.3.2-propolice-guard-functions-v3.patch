diff -Naurp glibc-2.3.4.orig/sysdeps/generic/libc-start.c glibc-2.3.4/sysdeps/generic/libc-start.c
--- glibc-2.3.4.orig/sysdeps/generic/libc-start.c	2004-03-31 01:46:43.000000000 +0000
+++ glibc-2.3.4/sysdeps/generic/libc-start.c	2005-02-19 20:05:53.666856507 +0000
@@ -188,6 +188,9 @@ LIBC_START_MAIN (int (*main) (int, char 
     GLRO(dl_debug_printf) ("\ntransferring control: %s\n\n", argv[0]);
 #endif
 
+  /* call the __guard_setup to set up the random __guard value */
+  __guard_setup ();	/* pappy@gentoo.org (pappy rules) */
+
 #ifdef HAVE_CLEANUP_JMP_BUF
   /* Memory for the cancellation buffer.  */
   struct pthread_unwind_buf unwind_buf;
diff -Naurp glibc-2.3.4.orig/sysdeps/unix/sysv/linux/Dist glibc-2.3.4/sysdeps/unix/sysv/linux/Dist
--- glibc-2.3.4.orig/sysdeps/unix/sysv/linux/Dist	2004-06-30 07:58:38.000000000 +0000
+++ glibc-2.3.4/sysdeps/unix/sysv/linux/Dist	2005-02-19 20:05:53.668856177 +0000
@@ -1,3 +1,4 @@
+ssp.c
 bits/initspin.h
 cmsg_nxthdr.c
 dl-brk.c
diff -Naurp glibc-2.3.4.orig/sysdeps/unix/sysv/linux/Makefile glibc-2.3.4/sysdeps/unix/sysv/linux/Makefile
--- glibc-2.3.4.orig/sysdeps/unix/sysv/linux/Makefile	2004-10-04 23:29:06.000000000 +0000
+++ glibc-2.3.4/sysdeps/unix/sysv/linux/Makefile	2005-02-19 20:05:53.671855683 +0000
@@ -1,5 +1,5 @@
 ifeq ($(subdir),csu)
-sysdep_routines += errno-loc
+sysdep_routines += errno-loc ssp
 endif
 
 ifeq ($(subdir),assert)
diff -Naurp glibc-2.3.4.orig/sysdeps/unix/sysv/linux/ssp.c glibc-2.3.4/sysdeps/unix/sysv/linux/ssp.c
--- glibc-2.3.4.orig/sysdeps/unix/sysv/linux/ssp.c	1970-01-01 00:00:00.000000000 +0000
+++ glibc-2.3.4/sysdeps/unix/sysv/linux/ssp.c	2005-02-19 20:01:53.673372125 +0000
@@ -0,0 +1,171 @@
+/*
+ * Distributed under the terms of the GNU General Public License v2
+ * $Header: /var/cvsroot/gentoo/src/patchsets/glibc/2.3.5/Attic/2000_all_2.3.2-propolice-guard-functions-v3.patch,v 1.1 2005/04/12 19:34:13 eradicator Exp $
+ *
+ * This is a modified version of Hiroaki Etoh's stack smashing routines
+ * implemented for glibc.
+ *
+ * The following people have contributed input to this code.
+ * Ned Ludd - <solar[@]gentoo.org>
+ * Alexander Gabert - <pappy[@]gentoo.org>
+ * The PaX Team - <pageexec[@]freemail.hu>
+ * Peter S. Mazinger - <ps.m[@]gmx.net>
+ * Yoann Vandoorselaere - <yoann[@]prelude-ids.org>
+ * Robert Connolly - <robert[@]linuxfromscratch.org>
+ * Cory Visi <cory@visi.name>
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+# include <config.h>
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <signal.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <sys/syslog.h>
+#include <sys/time.h>
+#include <sys/sysctl.h>
+
+#ifndef _PATH_LOG
+#define _PATH_LOG "/dev/log"
+#endif
+
+#ifdef __PROPOLICE_BLOCK_SEGV__
+#define SSP_SIGTYPE SIGSEGV
+#elif __PROPOLICE_BLOCK_KILL__
+#define SSP_SIGTYPE SIGKILL
+#else
+#define SSP_SIGTYPE SIGABRT
+#endif
+
+unsigned long __guard = 0UL;
+
+/* Use of __* functions from the rest of glibc here avoids
+ * initialisation problems for executables preloaded with
+ * libraries that overload the associated standard library
+ * functions.
+ */
+void
+__guard_setup (void)
+{
+  size_t size;
+#ifdef HAVE_DEV_ERANDOM
+  int mib[3];
+#endif
+
+  if (__guard != 0UL)
+    return;
+
+#ifndef __SSP_QUICK_CANARY__
+#ifdef HAVE_DEV_ERANDOM
+  /* Random is another depth in Linux, hence an array of 3. */
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_RANDOM;
+  mib[2] = RANDOM_ERANDOM;
+
+  size = sizeof (unsigned long);
+  if (__sysctl (mib, 3, &__guard, &size, NULL, 0) != (-1))
+    if (__guard != 0UL)
+      return;
+#endif
+  /* 
+   * Attempt to open kernel pseudo random device if one exists before 
+   * opening urandom to avoid system entropy depletion.
+   */
+  {
+    int fd;
+#ifdef HAVE_DEV_ERANDOM
+    if ((fd = __open ("/dev/erandom", O_RDONLY)) == (-1))
+#endif
+      fd = __open ("/dev/urandom", O_RDONLY);
+    if (fd != (-1))
+      {
+	size = __read (fd, (char *) &__guard, sizeof (__guard));
+	__close (fd);
+	if (size == sizeof (__guard))
+	  return;
+      }
+  }
+#endif
+
+  /* If sysctl was unsuccessful, use the "terminator canary". */
+  __guard = 0xFF0A0D00UL;
+
+  {
+    /* Everything failed? Or we are using a weakened model of the 
+     * terminator canary */
+    struct timeval tv;
+
+    __gettimeofday (&tv, NULL);
+    __guard ^= tv.tv_usec ^ tv.tv_sec;
+  }
+}
+
+void
+__stack_smash_handler (char func[], int damaged)
+{
+  struct sigaction sa;
+  const char message[] = ": stack smashing attack in function ";
+  int bufsz, len;
+  char buf[512];
+#ifndef __dietlibc__
+  struct sockaddr_un sock;	/* AF_UNIX address of local logger */
+  int log;
+  extern char *__progname;
+#else
+  static char *__progname = "dietapp";
+#endif
+
+  sigset_t mask;
+  sigfillset (&mask);
+
+  sigdelset (&mask, SSP_SIGTYPE);	/* Block all signal handlers */
+  sigprocmask (SIG_BLOCK, &mask, NULL);	/* except SIGABRT */
+
+  bufsz = sizeof (buf);
+  strcpy (buf, "<2>");
+  len = 3;
+
+  strncat (buf, __progname, sizeof (buf) - 4);
+  len = strlen (buf);
+
+  if (bufsz > len)
+    {
+      strncat (buf, message, bufsz - len - 1);
+      len = strlen (buf);
+    }
+  if (bufsz > len)
+    {
+      strncat (buf, func, bufsz - len - 1);
+      len = strlen (buf);
+    }
+
+  /* print error message */
+  write (STDERR_FILENO, buf + 3, len - 3);
+  write (STDERR_FILENO, "()\n", 3);
+#ifndef __dietlibc__
+  if ((log = socket (AF_UNIX, SOCK_DGRAM, 0)) != -1)
+    {
+      /* Send "found" message to the "/dev/log" path */
+      sock.sun_family = AF_UNIX;
+      (void) strncpy (sock.sun_path, _PATH_LOG, sizeof (sock.sun_path) - 1);
+      sock.sun_path[sizeof (sock.sun_path) - 1] = '\0';
+      sendto (log, buf, len, 0, (struct sockaddr *) &sock, sizeof (sock));
+    }
+#endif
+  /* Make sure the default handler is associated with the our signal handler */
+
+  memset (&sa, 0, sizeof (struct sigaction));
+  sigfillset (&sa.sa_mask);	/* Block all signals */
+  sa.sa_flags = 0;
+  sa.sa_handler = SIG_DFL;
+  sigaction (SSP_SIGTYPE, &sa, NULL);
+  (void) kill (getpid (), SSP_SIGTYPE);
+  _exit (127);
+}
diff -Naurp glibc-2.3.4.orig/sysdeps/unix/sysv/linux/Versions glibc-2.3.4/sysdeps/unix/sysv/linux/Versions
--- glibc-2.3.4.orig/sysdeps/unix/sysv/linux/Versions	2004-10-22 19:57:45.000000000 +0000
+++ glibc-2.3.4/sysdeps/unix/sysv/linux/Versions	2005-02-19 20:05:53.675855025 +0000
@@ -108,6 +108,8 @@ libc {
   GLIBC_2.3.2 {
     # New kernel interfaces.
     epoll_create; epoll_ctl; epoll_wait;
+       # global objects and functions for the propolice patch in gcc - moved from libgcc by pappy@gentoo.org
+       __guard; __guard_setup; __stack_smash_handler;
   }
   GLIBC_2.3.3 {
     gnu_dev_major; gnu_dev_minor; gnu_dev_makedev;
