	With latest versions of glibc, a lot of apps failed on a PaX enabled
	system with:
		 cannot enable executable stack as shared object requires: Permission denied
	
	This is due to PaX 'exec-protecting' the stack, and ld.so then trying
	to make the stack executable due to some libraries not containing the
	PT_GNU_STACK section.  Bug #32960.  <azarah@gentoo.org> (12 Nov 2003).

--- libc/sysdeps/unix/sysv/linux/dl-execstack.c
+++ libc/sysdeps/unix/sysv/linux/dl-execstack.c
@@ -56,11 +56,17 @@
 					__stack_prot) == 0, 1))
 	goto return_success;
 # if __ASSUME_PROT_GROWSUPDOWN == 0
-      if (errno == EINVAL)
+      if (errno == EINVAL) {
 	no_growsupdown = true;
-      else
+      } else {
+#  endif
+	if (errno == EACCES)		/* PAX is enabled */
+	  return 0;
+	else
+	  return errno;
+#  if __ASSUME_PROT_GROWSUPDOWN == 0
+      }
 # endif
-	return errno;
     }
 #endif
 
@@ -84,8 +90,11 @@
 	page -= size;
       else
 	{
-	  if (errno != ENOMEM)	/* Unexpected failure mode.  */
+	  if (errno == EACCES) {	/* PAX is enabled */
+	    return 0;
+	  } else if (errno != ENOMEM) {	/* Unexpected failure mode.  */
 	    return errno;
+	  }
 
 	  if (size == GLRO(dl_pagesize))
 	    /* We just tried to mprotect the top hole page and failed.
@@ -107,8 +116,11 @@
 	page += size;
       else
 	{
-	  if (errno != ENOMEM)	/* Unexpected failure mode.  */
+	  if (errno == EACCES) {	/* PAX is enabled */
+	    return 0;
+	  } else if (errno != ENOMEM) {	/* Unexpected failure mode.  */
 	    return errno;
+	  }
 
 	  if (size == GLRO(dl_pagesize))
 	    /* We just tried to mprotect the lowest hole page and failed.
