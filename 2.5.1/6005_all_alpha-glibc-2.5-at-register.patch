ugly, but simple, hack to work around a problem introduced by gcc4.  the
problem is that the glibc alpha port includes asm() code that is optimized for
ev6+ cpu's and uses instructions that are not found on older cpu's.  this is
fine because at runtime, the code will detect which code path to take.  but
newer gcc's have started to output '.arch ev#' which the assembler uses to
validate that all instructions given it are valid for the specified cpu.  in
the past, glibc would simply add -Wa,-mev6 to ASFLAGS so that the assembler
knew which cpu to work with.  however, since '.arch' directives have priority
over gas command line options, this no longer works and we end up with the
ugly error from gas:
Error: macro requires $at register while noat in effect

http://gcc.gnu.org/ml/gcc/2005-07/msg00371.html
http://gcc.gnu.org/ml/gcc/2006-07/msg00346.html

to summarize:
	- gcc-4.x started outputting '.arch' directive in asm
	- gas respects '.arch' over cmdline -mev6
	- glibc's ioperm.c includes ev6+ on purpose but will not execute it
	  on ev4/ev5 cpu's via runtime cpu detection

so our lame fix is to insert '.arch ev6' into the code until the alpha
maintainers can figure out how they want to resolve this (change gcc behavior,
change gas behavior, tweak asm code in glibc/kernel/etc...)

looks like upstream has taken this approach ;)
2007-05-07  Richard Henderson  <rth@redhat.com>

	* sysdeps/unix/sysv/linux/alpha/ioperm.c: If BWX insns not
	available in the compiler, add .arch directive to the assembly.

Index: sysdeps/unix/sysv/linux/alpha/ioperm.c
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/unix/sysv/linux/alpha/ioperm.c,v
retrieving revision 1.22
retrieving revision 1.23
diff -u -p -r1.22 -r1.23
--- sysdeps/unix/sysv/linux/alpha/ioperm.c	6 Jul 2001 04:56:13 -0000	1.22
+++ sysdeps/unix/sysv/linux/alpha/ioperm.c	7 May 2007 22:57:20 -0000	1.23
@@ -32,6 +32,11 @@
    sparse address space would work (e.g., the Low Cost Alpha chip has an
    I/O address space that's 512MB large!).  */
 
+/* Make sure the ldbu/stb asms below are not expaneded to macros.  */
+#ifndef __alpha_bwx__
+asm(".arch ev56");
+#endif
+
 #include <errno.h>
 #include <fcntl.h>
 #include <stdio.h>
