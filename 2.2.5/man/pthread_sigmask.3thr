.TH PTHREAD_SIGNAL 3 LinuxThreads


.SH NAME
pthread_sigmask, pthread_kill, sigwait \- handling of signals in threads

.SH SYNOPSIS
.B #include <pthread.h>
.br
.B #include <signal.h>

.BI "int pthread_sigmask(int " how ", const sigset_t *" newmask ", sigset_t *" oldmask ");"

.BI "int pthread_kill(pthread_t " thread ", int " signo ");"

.BI "int sigwait(const sigset_t *" set ", int *" sig ");"

.SH DESCRIPTION

.B "pthread_sigmask"
changes the signal mask for the calling thread as
described by the 
.I "how"
and 
.I "newmask"
arguments. If 
.I "oldmask"
is not
.BR "NULL" ,
the previous signal mask is stored in the location pointed to
by 
.IR "oldmask" .

The meaning of the 
.I "how"
and 
.I "newmask"
arguments is the same as for
.BR "sigprocmask" (2).
If 
.I "how"
is 
.BR "SIG_SETMASK" ,
the signal mask is set to
.IR "newmask" .
If 
.I "how"
is 
.BR "SIG_BLOCK" ,
the signals specified to 
.I "newmask"
are added to the current signal mask.  If 
.I "how"
is 
.BR "SIG_UNBLOCK" ,
the
signals specified to 
.I "newmask"
are removed from the current signal
mask.

Recall that signal masks are set on a per-thread basis, but signal
actions and signal handlers, as set with 
.BR "sigaction" (2),
are shared
between all threads.

.B "pthread_kill"
send signal number 
.I "signo"
to the thread
.IR "thread" .
The signal is delivered and handled as described in
.BR "kill" (2).

.B "sigwait"
suspends the calling thread until one of the signals
in 
.I "set"
is delivered to the calling thread. It then stores the number
of the signal received in the location pointed to by 
.I "sig"
and
returns. The signals in 
.I "set"
must be blocked and not ignored on
entrance to 
.BR "sigwait" .
If the delivered signal has a signal handler
function attached, that function is 
.I "not"
called.

.SH CANCELLATION

.B "sigwait"
is a cancellation point.

.SH "RETURN VALUE"

On success, 0 is returned. On failure, a non-zero error code is returned.

.SH ERRORS

The 
.B "pthread_sigmask"
function returns the following error codes
on error:
.RS
.TP
.B "EINVAL"
.I "how"
is not one of 
.BR "SIG_SETMASK" ,
.BR "SIG_BLOCK" ,
or 
.B "SIG_UNBLOCK"

.TP
.B "EFAULT"
.I "newmask"
or 
.I "oldmask"
point to invalid addresses
.RE

The 
.B "pthread_kill"
function returns the following error codes
on error:
.RS
.TP
.B "EINVAL"
.I "signo"
is not a valid signal number

.TP
.B "ESRCH"
the thread 
.I "thread"
does not exist (e.g. it has already terminated)
.RE

The 
.B "sigwait"
function never returns an error.

.SH AUTHOR
Xavier Leroy <Xavier.Leroy@inria.fr>

.SH "SEE ALSO"
.BR "sigprocmask" (2),
.BR "kill" (2),
.BR "sigaction" (2),
.BR "sigsuspend" (2).

.SH NOTES

For 
.B "sigwait"
to work reliably, the signals being waited for must be
blocked in all threads, not only in the calling thread, since
otherwise the POSIX semantics for signal delivery do not guarantee
that it's the thread doing the 
.B "sigwait"
that will receive the signal.
The best way to achieve this is block those signals before any threads
are created, and never unblock them in the program other than by
calling 
.BR "sigwait" .

.SH BUGS

Signal handling in LinuxThreads departs significantly from the POSIX
standard. According to the standard, ``asynchronous'' (external)
signals are addressed to the whole process (the collection of all
threads), which then delivers them to one particular thread. The
thread that actually receives the signal is any thread that does
not currently block the signal.

In LinuxThreads, each thread is actually a kernel process with its own
PID, so external signals are always directed to one particular thread.
If, for instance, another thread is blocked in 
.B "sigwait"
on that
signal, it will not be restarted.

The LinuxThreads implementation of 
.B "sigwait"
installs dummy signal
handlers for the signals in 
.I "set"
for the duration of the wait. Since
signal handlers are shared between all threads, other threads must not
attach their own signal handlers to these signals, or alternatively
they should all block these signals (which is recommended anyway --
see the Notes section).
