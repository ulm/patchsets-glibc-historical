Add backwards compat support for gcc-3.x ssp ... older ssp versions
used __guard and __stack_smash_handler symbols while gcc-4.1 and newer
uses __stack_chk_guard and __stack_chk_fail.

--- glibc-2.4/sysdeps/unix/sysv/linux/dl-osinfo.h
+++ glibc-2.4/sysdeps/unix/sysv/linux/dl-osinfo.h
@@ -179,3 +179,13 @@ _dl_setup_stack_chk_guard (void)
   p[sizeof (ret) - 2] = '\n';
   return ret;
 }
+
+#ifdef ENABLE_OLD_SSP_COMPAT
+# define OLD_DECLARE_STACK_GUARD  \
+	uintptr_t __guard_local attribute_relro attribute_hidden __attribute__ ((nocommon)); \
+	strong_alias (__guard_local, __guard);
+# define OLD_SET_STACK_GUARD(val) (__guard_local = (val)) 
+#else
+# define OLD_DECLARE_STACK_GUARD
+# define OLD_SET_STACK_GUARD(val)
+#endif
--- glibc-2.4/elf/rtld.c
+++ glibc-2.4/elf/rtld.c
@@ -89,6 +89,7 @@ INTDEF(_dl_argv)
    in thread local area.  */
 uintptr_t __stack_chk_guard attribute_relro;
 #endif
+OLD_DECLARE_STACK_GUARD
 
 /* Only exported for architectures that don't store the pointer guard
    value in thread local area.  */
@@ -1834,6 +1835,7 @@ ERROR: ld.so: object '%s' cannot be load
 
   /* Set up the stack checker's canary.  */
   uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard ();
+  OLD_SET_STACK_GUARD (stack_chk_guard);
 #ifdef THREAD_SET_STACK_GUARD
   THREAD_SET_STACK_GUARD (stack_chk_guard);
 #else
--- glibc-2.4/csu/libc-start.c
+++ glibc-2.4/csu/libc-start.c
@@ -28,8 +28,8 @@
 extern int __libc_multiple_libcs;
 
 #include <tls.h>
+#include <dl-osinfo.h>
 #ifndef SHARED
-# include <dl-osinfo.h>
 extern void __pthread_initialize_minimal (void)
 # if !(USE_TLS - 0) && !defined NONTLS_INIT_TP
      __attribute__ ((weak))
@@ -41,6 +41,7 @@
 uintptr_t __stack_chk_guard attribute_relro;
 # endif
 #endif
+OLD_DECLARE_STACK_GUARD
 
 #ifdef HAVE_PTR_NTHREADS
 /* We need atomic operations.  */
@@ -152,6 +153,7 @@
 # ifndef SHARED
   /* Set up the stack checker's canary.  */
   uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard ();
+  OLD_SET_STACK_GUARD (stack_chk_guard);
 #  ifdef THREAD_SET_STACK_GUARD
   THREAD_SET_STACK_GUARD (stack_chk_guard);
 #  else
--- glibc-2.4/debug/stack_chk_fail.c
+++ glibc-2.4/debug/stack_chk_fail.c
@@ -31,3 +31,7 @@ __stack_chk_fail (void)
     __libc_message (1, "*** stack smashing detected ***: %s terminated\n",
 		    __libc_argv[0] ?: "<unknown>");
 }
+
+#ifdef ENABLE_OLD_SSP_COMPAT
+strong_alias (__stack_chk_fail, __stack_smash_handler)
+#endif
--- glibc-2.4/Versions.def
+++ glibc-2.4/Versions.def
@@ -104,6 +104,9 @@ ld {
   GLIBC_2.0
   GLIBC_2.1
   GLIBC_2.3
+%ifdef ENABLE_OLD_SSP_COMPAT
+  GLIBC_2.3.2
+%endif
   GLIBC_2.4
   GLIBC_PRIVATE
 }
--- glibc-2.4/elf/Versions
+++ glibc-2.4/elf/Versions
@@ -43,6 +43,12 @@ ld {
     # runtime interface to TLS
     __tls_get_addr;
   }
+%ifdef ENABLE_OLD_SSP_COMPAT
+  GLIBC_2.3.2 {
+    # backwards ssp compat support
+    __guard;
+  }
+%endif
   GLIBC_2.4 {
     # stack canary
     __stack_chk_guard;
--- glibc-2.4/csu/Versions
+++ glibc-2.4/csu/Versions
@@ -17,6 +17,12 @@
     # New special glibc functions.
     gnu_get_libc_release; gnu_get_libc_version;
   }
+  GLIBC_2.3.2 {
+%ifdef ENABLE_OLD_SSP_COMPAT
+    # global objects and functions for the old propolice patch in gcc
+    __guard; __stack_smash_handler;
+%endif
+  }
   GLIBC_PRIVATE {
 %if USE_TLS && HAVE___THREAD
     # This version is for the TLS symbol, GLIBC_2.0 is the old object symbol.
--- glibc-2.4/debug/Versions
+++ glibc-2.4/debug/Versions
@@ -10,6 +10,12 @@ libc {
     # These are to support some gcc features.
     __cyg_profile_func_enter; __cyg_profile_func_exit;
   }
+%ifdef ENABLE_OLD_SSP_COMPAT
+  GLIBC_2.3.2 {
+    # backwards ssp compat support; alias to __stack_chk_fail
+    __stack_smash_handler;
+  }
+%endif
   GLIBC_2.3.4 {
     __chk_fail;
     __memcpy_chk; __memmove_chk; __mempcpy_chk; __memset_chk; __stpcpy_chk;
--- glibc-2.4/config.h.in
+++ glibc-2.4/config.h.in
@@ -39,6 +39,9 @@
    assembler instructions per line.  Default is `;'  */
 #undef ASM_LINE_SEP
 
+/* Define if we want to enable support for old ssp symbols */
+#undef	ENABLE_OLD_SSP_COMPAT
+
 /* Define if not using ELF, but `.init' and `.fini' sections are available.  */
 #undef	HAVE_INITFINI
 
--- glibc-2.4/configure.in
+++ glibc-2.4/configure.in
@@ -1625,6 +1625,15 @@ fi
 rm -f conftest*])
 AC_SUBST(libc_cv_ssp)
 
+AC_ARG_ENABLE([old-ssp-compat],
+	      AC_HELP_STRING([--enable-old-ssp-compat],
+	                     [enable support for older ssp symbols @<:@default=no@:>@]),
+	      [enable_old_ssp_compat=$enableval],
+	      [enable_old_ssp_compat=no])
+if test "x$enable_old_ssp_compat" = "xyes"; then
+  AC_DEFINE(ENABLE_OLD_SSP_COMPAT)
+fi
+
 if test $elf != yes; then
   AC_CACHE_CHECK(for .init and .fini sections, libc_cv_have_initfini,
 		 [AC_TRY_COMPILE(, [asm (".section .init");
--- glibc-2.4/configure
+++ glibc-2.4/configure
@@ -887,6 +887,9 @@ Optional Features:
   --enable-kernel=VERSION compile for compatibility with kernel not older than
                           VERSION
   --enable-all-warnings   enable all useful warnings gcc can issue
+  --disable-old-ssp-compat
+                          enable support for older ssp symbols
+                          [default=no]
 
 Optional Packages:
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
@@ -5936,6 +5939,20 @@ echo "$as_me:$LINENO: result: $libc_cv_s
 echo "${ECHO_T}$libc_cv_ssp" >&6
 
 
+# Check whether --enable-old-ssp-compat or --disable-old-ssp-compat was given.
+if test "${enable_old_ssp_compat+set}" = set; then
+  enableval="$enable_old_ssp_compat"
+  enable_old_ssp_compat=$enableval
+else
+  enable_old_ssp_compat=no
+fi;
+if test "x$enable_old_ssp_compat" = "xyes"; then
+  cat >>confdefs.h <<\_ACEOF
+#define ENABLE_OLD_SSP_COMPAT 1
+_ACEOF
+
+fi
+
 if test $elf != yes; then
   echo "$as_me:$LINENO: checking for .init and .fini sections" >&5
 echo $ECHO_N "checking for .init and .fini sections... $ECHO_C" >&6
